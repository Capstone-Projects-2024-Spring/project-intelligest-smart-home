"use strict";(self.webpackChunkcreate_project_docs=self.webpackChunkcreate_project_docs||[]).push([[1996],{99012:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>c,toc:()=>l});var n=s(85893),r=s(11151);const i={sidebar_position:2},a="Integration tests",c={id:"testing/integration-testing",title:"Integration tests",description:"Use Case 1: Light control through ASL Gestures",source:"@site/docs/testing/integration-testing.md",sourceDirName:"testing",slug:"/testing/integration-testing",permalink:"/project-intelligest-smart-home/docs/testing/integration-testing",draft:!1,unlisted:!1,editUrl:"https://github.com/Capstone-Projects-2024-Spring/project-intelligest-smart-home/edit/main/documentation/docs/testing/integration-testing.md",tags:[],version:"current",lastUpdatedBy:"KevinXJarema",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"docsSidebar",previous:{title:"Unit tests",permalink:"/project-intelligest-smart-home/docs/testing/unit-testing"},next:{title:"Acceptance test",permalink:"/project-intelligest-smart-home/docs/testing/acceptance-testing"}},o={},l=[{value:"Use Case 1: Light control through ASL Gestures",id:"use-case-1-light-control-through-asl-gestures",level:2},{value:"Use Case 2: Weather seeking through Gestures",id:"use-case-2-weather-seeking-through-gestures",level:2},{value:"Use Case 3: Changing the Kitchen Light Color",id:"use-case-3-changing-the-kitchen-light-color",level:2},{value:"Use Case 4: Smart lock setup and control",id:"use-case-4-smart-lock-setup-and-control",level:2},{value:"Use Case 5: Adding reminders through Gestures",id:"use-case-5-adding-reminders-through-gestures",level:2},{value:"Use Case 6: Temperature adjustment with ASL",id:"use-case-6-temperature-adjustment-with-asl",level:2},{value:"Use Case 7: Changing Channels",id:"use-case-7-changing-channels",level:2}];function _(e){const t={code:"code",h1:"h1",h2:"h2",pre:"pre",...(0,r.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"integration-tests",children:"Integration tests"}),"\n",(0,n.jsx)(t.h2,{id:"use-case-1-light-control-through-asl-gestures",children:"Use Case 1: Light control through ASL Gestures"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-python",children:'    def test_light_control_integration(self):\n        home_assistant = Mock(spec=HomeAssistant)\n        user_interface = Mock(spec=UserInterface)\n        python_scripts = Mock(spec=PythonScripts)\n        tpu = Mock(spec=TPU)\n        intelligest_home = IntelliGestHome(home_assistant, user_interface, python_scripts, tpu)\n\n        intelligest_home.connect_device()\n        gesture = "Gesture for turning lights on/off"\n        intelligest_home.detect_gesture(gesture)\n        user_interface.display_feedback.assert_called_once()\n\n        home_assistant.update_device_status.assert_called_once()\n'})}),"\n",(0,n.jsx)(t.h2,{id:"use-case-2-weather-seeking-through-gestures",children:"Use Case 2: Weather seeking through Gestures"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-python",children:'        def test_weather_seeking_integration(self):\n        home_assistant = Mock(spec=HomeAssistant)\n        user_interface = Mock(spec=UserInterface)\n        python_scripts = Mock(spec=PythonScripts)\n\n        intelligest_home = IntelliGestHome(home_assistant, user_interface, python_scripts, tpu)\n        gesture = "Gesture for seeking weather information"\n        intelligest_home.detect_gesture(gesture)\n        user_interface.display_feedback.assert_called_once()\n        user_interface.display_processing.assert_called_once()\n\n        user_interface.display_weather_info.assert_called_once()\n'})}),"\n",(0,n.jsx)(t.h2,{id:"use-case-3-changing-the-kitchen-light-color",children:"Use Case 3: Changing the Kitchen Light Color"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-python",children:'    def test_kitchen_light_color_change_integration(self):\n        home_assistant = Mock(spec=HomeAssistant)\n        user_interface = Mock(spec=UserInterface)\n        python_scripts = Mock(spec=PythonScripts)\n        tpu = Mock(spec=TPU)\n        intelligest_home = IntelliGestHome(home_assistant, user_interface, python_scripts, tpu)\n\n        gesture = "Gesture for changing kitchen light color"\n        intelligest_home.detect_gesture(gesture)\n        user_interface.display_feedback.assert_called_once()\n\n        user_interface.display_processing.assert_called_once()\n        home_assistant.update_device_status.assert_called_once_with("Kitchen Light", "Yellow")\n'})}),"\n",(0,n.jsx)(t.h2,{id:"use-case-4-smart-lock-setup-and-control",children:"Use Case 4: Smart lock setup and control"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-python",children:'    def test_smart_lock_setup_and_control_integration(self):\n        home_assistant = Mock(spec=HomeAssistant)\n        user_interface = Mock(spec=UserInterface)\n        python_scripts = Mock(spec=PythonScripts)\n        tpu = Mock(spec=TPU)\n\n        intelligest_home = IntelliGestHome(home_assistant, user_interface, python_scripts, tpu)\n        smart_lock = Mock()\n        intelligest_home.connect_device(smart_lock)\n\n        user_interface.display_device_state.assert_called_once_with("Smart Lock", "Locked")\n        intelligest_home.perform_action("Unlock Smart Lock")\n        home_assistant.update_device_status.assert_called_once_with("Smart Lock", "Unlocked")\n        intelligest_home.perform_action("Lock Smart Lock")\n        home_assistant.update_device_status.assert_called_with("Smart Lock", "Locked")\n'})}),"\n",(0,n.jsx)(t.h2,{id:"use-case-5-adding-reminders-through-gestures",children:"Use Case 5: Adding reminders through Gestures"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-python",children:'    def test_reminder_addition_integration(self):\n        home_assistant = Mock(spec=HomeAssistant)\n        user_interface = Mock(spec=UserInterface)\n        python_scripts = Mock(spec=PythonScripts)\n        tpu = Mock(spec=TPU)\n\n        intelligest_home = IntelliGestHome(home_assistant, user_interface, python_scripts, tpu)\n\n        gesture = "Gesture for adding reminder"\n        intelligest_home.detect_gesture(gesture)\n\n        user_interface.display_feedback.assert_called_once()\n        user_interface.display_processing.assert_called_once()\n\n        reminder_text = "Buy a couple of Milk Gallons"\n        python_scripts.make_prediction.return_value = reminder_text\n\n        user_interface.ask_for_confirmation.assert_called_once_with(reminder_text)\n\n        confirmed = True\n        intelligest_home.confirm_action(confirmed)\n        python_scripts.add_reminder.assert_called_once_with(reminder_text)\n'})}),"\n",(0,n.jsx)(t.h2,{id:"use-case-6-temperature-adjustment-with-asl",children:"Use Case 6: Temperature adjustment with ASL"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-python",children:'    def test_temperature_adjustment_integration(self):\n\n        home_assistant = Mock(spec=HomeAssistant)\n        user_interface = Mock(spec=UserInterface)\n        python_scripts = Mock(spec=PythonScripts)\n        tpu = Mock(spec=TPU)\n\n        intelligest_home = IntelliGestHome(home_assistant, user_interface, python_scripts, tpu)\n\n        gesture = "Gesture for adjusting temperature"\n        intelligest_home.detect_gesture(gesture)\n        user_interface.display_feedback.assert_called_once()\n        user_interface.display_processing.assert_called_once()\n\n        temperature_change = "Hotter"\n        python_scripts.make_prediction.return_value = temperature_change\n\n        home_assistant.execute_automation.assert_called_once_with("Temperature Control", temperature_change)\n\n        user_interface.display_confirmation.assert_called_once()\n'})}),"\n",(0,n.jsx)(t.h2,{id:"use-case-7-changing-channels",children:"Use Case 7: Changing Channels"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-python",children:'    def test_tv_channel_change_integration(self):\n        home_assistant = Mock(spec=HomeAssistant)\n        user_interface = Mock(spec=UserInterface)\n        python_scripts = Mock(spec=PythonScripts)\n        tpu = Mock(spec=TPU)\n\n        intelligest_home = IntelliGestHome(home_assistant, user_interface, python_scripts, tpu)\n\n        gesture = "Gesture for turning on TV"\n        intelligest_home.detect_gesture(gesture)\n        user_interface.display_feedback.assert_called_once()\n\n        user_interface.display_processing.assert_called_once()\n\n        channel = "Channel to be turned on"\n        python_scripts.make_prediction.return_value = channel\n\n        home_assistant.execute_automation.assert_called_once_with("TV Control", channel)\n        user_interface.display_confirmation.assert_called_once()\n'})})]})}function h(e={}){const{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(_,{...e})}):_(e)}},11151:(e,t,s)=>{s.d(t,{Z:()=>c,a:()=>a});var n=s(67294);const r={},i=n.createContext(r);function a(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);