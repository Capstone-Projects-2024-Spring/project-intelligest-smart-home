"use strict";(self.webpackChunkcreate_project_docs=self.webpackChunkcreate_project_docs||[]).push([[1270],{64225:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>r,contentTitle:()=>d,default:()=>p,frontMatter:()=>c,metadata:()=>i,toc:()=>l});var n=t(85893),a=t(11151);const c={sidebar_position:1},d="Unit tests",i={id:"testing/unit-testing",title:"Unit tests",description:"Class Home Assistant:",source:"@site/docs/testing/unit-testing.md",sourceDirName:"testing",slug:"/testing/unit-testing",permalink:"/project-intelligest-smart-home/docs/testing/unit-testing",draft:!1,unlisted:!1,editUrl:"https://github.com/Capstone-Projects-2024-Spring/project-intelligest-smart-home/edit/main/documentation/docs/testing/unit-testing.md",tags:[],version:"current",lastUpdatedBy:"KevinXJarema",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"docsSidebar",previous:{title:"Test Procedures",permalink:"/project-intelligest-smart-home/docs/category/test-procedures"},next:{title:"Integration tests",permalink:"/project-intelligest-smart-home/docs/testing/integration-testing"}},r={},l=[{value:"Class Home Assistant:",id:"class-home-assistant",level:2},{value:"Class User Interface:",id:"class-user-interface",level:2},{value:"Class Device",id:"class-device",level:2},{value:"Class PythonScripts:",id:"class-pythonscripts",level:2},{value:"Class JavaScript Custom Cards",id:"class-javascript-custom-cards",level:2},{value:"Class Camera",id:"class-camera",level:2},{value:"Class TPU",id:"class-tpu",level:2}];function o(e){const s={code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,a.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.h1,{id:"unit-tests",children:"Unit tests"}),"\n",(0,n.jsx)(s.h2,{id:"class-home-assistant",children:"Class Home Assistant:"}),"\n",(0,n.jsx)(s.p,{children:"Method +add_device()"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-python",children:'def test_add_device(self):\n\n        device = Mock()\n        home_assistant = HomeAssistant()\n        \n        device_name = "TV"\n        \n        expected_devices_length = len(home_assistant.devices) + 1\n        \n        home_assistant.add_device(device_name, device)\n        \n        self.assertEqual(len(home_assistant.devices), expected_devices_length)\n'})}),"\n",(0,n.jsx)(s.p,{children:"Method +remove_device()"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-python",children:'def test_remove_device(self):\n        home_assistant = HomeAssistant()\n        home_assistant.devices = {"TV": Mock(), "Alarm": Mock()}\n    \n        device_name = "TV"\n    \n        expected_devices_length = len(home_assistant.devices) - 1\n        \n        home_assistant.remove_device(device_name)\n    \n        self.assertEqual(len(home_assistant.devices), expected_devices_length)\n'})}),"\n",(0,n.jsx)(s.p,{children:"Method +update_device_status()"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-python",children:'def test_update_device_status(self):\n        home_assistant = HomeAssistant()\n        home_assistant.devices = {"TV": Mock()}\n        \n        device_name = "TV"\n        new_status = "ON"\n        \n        home_assistant.update_device_status(device_name, new_status)\n\n        self.assertEqual(home_assistant.devices[device_name].status, new_status)\n'})}),"\n",(0,n.jsx)(s.p,{children:"Method +execute_automation()"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-python",children:'def test_execute_automation(self):\n        home_assistant = HomeAssistant()\n        automation = Mock()\n        \n        device_name = "TV"\n\n        expected_automation_executed = True\n        \n        result = home_assistant.execute_automation(device_name, automation)\n        \n        self.assertEqual(result, expected_automation_executed)\n'})}),"\n",(0,n.jsx)(s.h2,{id:"class-user-interface",children:"Class User Interface:"}),"\n",(0,n.jsx)(s.p,{children:"Method +send_command()"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-python",children:'def test_send_command(self):\n        home_assistant = Mock()\n        user_interface = UserInterface(home_assistant)\n        \n        command = "Turn on TV"\n        \n        expected_command_sent = True\n        \n        result = user_interface.send_command(command)\n        \n        self.assertEqual(result, expected_command_sent)\n'})}),"\n",(0,n.jsx)(s.p,{children:"Method +display_device_state():"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-python",children:'def test_display_device_state(self):\n        home_assistant = Mock()\n        user_interface = UserInterface(home_assistant)\n        home_assistant.devices = {"TV": Mock()}\n\n        device_name = "TV"\n        device_state = "ON"\n        \n        expected_device_state_displayed = True\n        \n        result = user_interface.display_device_state(device_name, device_state)\n        \n        self.assertEqual(result, expected_device_state_displayed)    \n'})}),"\n",(0,n.jsx)(s.h2,{id:"class-device",children:"Class Device"}),"\n",(0,n.jsx)(s.p,{children:"Method +update_status():"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-python",children:'def test_update_status(self):\n        device = Device("123", "Light")\n        new_status = "ON"\n        expected_status_updated = True\n        \n        result = device.update_status(new_status)\n        \n        self.assertEqual(result, expected_status_updated)\n        self.assertEqual(device.status, new_status)\n'})}),"\n",(0,n.jsx)(s.p,{children:"Method +execute_capability():"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-python",children:'def test_execute_capability(self):\n        device = Device("456", "Thermostat")\n        capability = "SetTemperature"\n        value = 23\n\n        expected_capability_executed = True\n        \n        result = device.execute_capability(capability, value)\n        self.assertEqual(result, expected_capability_executed)\n'})}),"\n",(0,n.jsx)(s.h2,{id:"class-pythonscripts",children:"Class PythonScripts:"}),"\n",(0,n.jsx)(s.p,{children:"Method +load_model():"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-python",children:'def test_load_model(self):\n        python_scripts = PythonScripts()\n        model_path = "model.tflite"\n        expected_model_loaded = True\n        \n        result = python_scripts.load_model(model_path)\n        self.assertEqual(result, expected_model_loaded)\n'})}),"\n",(0,n.jsx)(s.p,{children:"Method +capture_image():"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-python",children:"def test_capture_image(self):\n        python_scripts = PythonScripts()\n        expected_image_captured = True\n    \n        result = python_scripts.capture_image()\n        self.assertEqual(result, expected_image_captured)\n"})}),"\n",(0,n.jsx)(s.p,{children:"Method +preprocess_image():"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-python",children:"def test_preprocess_image(self):\n        python_scripts = PythonScripts()\n        image = Mock()\n        expected_image_preprocessed = True\n\n        result = python_scripts.preprocess_image(image)\n        self.assertEqual(result, expected_image_preprocessed)\n"})}),"\n",(0,n.jsx)(s.p,{children:"Method +make_prediction():"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-python",children:'def test_make_prediction(self):\n        python_scripts = PythonScripts()\n        image = Mock()\n        expected_prediction = "A"\n        prediction = python_scripts.make_prediction(image)\n        \n        self.assertEqual(prediction, expected_prediction)\n'})}),"\n",(0,n.jsx)(s.h2,{id:"class-javascript-custom-cards",children:"Class JavaScript Custom Cards"}),"\n",(0,n.jsx)(s.p,{children:"Method +create_card():"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-python",children:'def test_create_card(self):\n        javascript_custom_cards = JavaScriptCustomCards()\n        card_id = "asl_card"\n        expected_card_created = True\n\n        result = javascript_custom_cards.create_card(card_id)\n        self.assertEqual(result, expected_card_created)\n'})}),"\n",(0,n.jsx)(s.p,{children:"Method +display_image():"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-python",children:'def test_display_image(self):\n\n        javascript_custom_cards = JavaScriptCustomCards()\n        card_id = "asl_card"\n\n        image_url = "https://example.com/asl_image.jpg"\n\n        expected_image_displayed = True\n    \n        result = javascript_custom_cards.display_image(card_id, image_url)\n    \n        self.assertEqual(result, expected_image_displayed)\n'})}),"\n",(0,n.jsx)(s.p,{children:"Method +update_display_state():"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-python",children:'def test_update_display_state(self):\n        javascript_custom_cards = JavaScriptCustomCards()\n        card_id = "asl_card"\n        new_display_state = "show"\n        expected_display_state_updated = True\n        \n        result = javascript_custom_cards.update_display_state(card_id, new_display_state)\n        \n        self.assertEqual(result, expected_display_state_updated)\n'})}),"\n",(0,n.jsx)(s.h2,{id:"class-camera",children:"Class Camera"}),"\n",(0,n.jsx)(s.p,{children:"Method +capture_image():"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-python",children:"def test_capture_image(self):\n\n        camera = Camera()\n        python_scripts = Mock()\n        camera.python_scripts = python_scripts\n        \n        expected_image_captured = True\n\n        result = camera.capture_image()\n\n        self.assertEqual(result, expected_image_captured)\n        python_scripts.preprocess_image.assert_called_once()\n"})}),"\n",(0,n.jsx)(s.h2,{id:"class-tpu",children:"Class TPU"}),"\n",(0,n.jsx)(s.p,{children:"Method +load_model():"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-python",children:"def test_load_model(self):\n        tpu = TPU()\n        expected_model_loaded = True\n        result = tpu.load_model()\n\n        self.assertEqual(result, expected_model_loaded)\n"})}),"\n",(0,n.jsx)(s.p,{children:"Method +make_prediction():"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-python",children:'def test_make_prediction(self):\n        tpu = TPU()\n        preprocessed_image = Mock()\n        expected_prediction = "A"\n        prediction = tpu.make_prediction(preprocessed_image)\n        \n        self.assertEqual(prediction, expected_prediction)\n'})})]})}function p(e={}){const{wrapper:s}={...(0,a.a)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(o,{...e})}):o(e)}},11151:(e,s,t)=>{t.d(s,{Z:()=>i,a:()=>d});var n=t(67294);const a={},c=n.createContext(a);function d(e){const s=n.useContext(c);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function i(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:d(e.components),n.createElement(c.Provider,{value:s},e.children)}}}]);